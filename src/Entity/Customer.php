<?php

namespace App\Entity;

use ApiPlatform\Core\Annotation\ApiResource;
use App\Repository\CustomerRepository;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\ORM\Mapping\Entity;

/**
 * @ApiResource()
 * @ORM\Entity(repositoryClass=CustomerRepository::class)
 * @Entity
 */
class Customer extends User
{

    /**
     * @ORM\Column(type="string", length=255, nullable=true)
     */
    private $phone;

    /**
     * @ORM\OneToMany(targetEntity=Advert::class, mappedBy="Customer", orphanRemoval=true)
     */
    private $adverts;

    /**
     * @ORM\OneToMany(targetEntity=CreditCard::class, mappedBy="customer")
     */
    private $creditCards;

    public function __construct()
    {
        parent::__construct();
        $this->adverts = new ArrayCollection();
        $this->creditCards = new ArrayCollection();
    }
    
    public function getPhone(): ?string
    {
        return $this->phone;
    }

    public function setPhone(?string $phone): self
    {
        $this->phone = $phone;

        return $this;
    }

    /**
     * @return Collection|Advert[]
     */
    public function getAdverts(): Collection
    {
        return $this->adverts;
    }

    public function addAdvert(Advert $advert): self
    {
        if (!$this->adverts->contains($advert)) {
            $this->adverts[] = $advert;
            $advert->setCustomer($this);
        }
        return $this;
    }

    public function removeAdvert(Advert $advert): self
    {
        if ($this->adverts->removeElement($advert)) {
            // set the owning side to null (unless already changed)
            if ($advert->getCustomer() === $this) {
                $advert->setCustomer(null);
            }
        }

        return $this;
    }

    /**
     * @return Collection|CreditCard[]
     */
    public function getCreditCards(): Collection
    {
        return $this->creditCards;
    }

    public function addCreditCard(CreditCard $creditCard): self
    {
        if (!$this->creditCards->contains($creditCard)) {
            $this->creditCards[] = $creditCard;
            $creditCard->setCustomer($this);
        }

        return $this;
    }

    public function removeCreditCard(CreditCard $creditCard): self
    {
        if ($this->creditCards->removeElement($creditCard)) {
            // set the owning side to null (unless already changed)
            if ($creditCard->getCustomer() === $this) {
                $creditCard->setCustomer(null);
            }
        }

        return $this;
    }
	
	public function getRoles(): array
	{
		$roles= parent::getRoles(); // TODO: Change the autogenerated stub
		$roles[] = 'ROLE_CLIENT';
		return array_unique($roles);
	}
	
	
}
